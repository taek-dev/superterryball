
@BaseClass = BaseProperties_superterryball
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// superterryball.DeathTrigger
//
@SolidClass base(BaseProperties_superterryball) tags( Trigger ) 
metadata
{
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= trigger_marble_death : ""
[
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	actvationtags(tags) : "Actvation Tags" :  : "Entities with these tags can activate this trigger."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

//
// superterryball.EndGoal
//
@SolidClass base(BaseProperties_superterryball) tags( Trigger ) 
metadata
{
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= trigger_end_goal : ""
[
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	actvationtags(tags) : "Actvation Tags" :  : "Entities with these tags can activate this trigger."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

//
// superterryball.MarbleGame
//
@PointClass base(BaseProperties_superterryball) = superterryball : "This is your game class. This is an entity that is created serverside when the game starts, and is replicated to the client.   You can use this to create things like HUDs and declare which player class to use for spawned players.  Your game needs to be registered (using [Library] here) with the same name  as your game addon. If it isn't then we won't be able to find it."
[
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

//
// superterryball.GameSetup
//
@PointClass base(BaseProperties_superterryball) = terryball_setup : "The setup entity for the game. This is for difficulty, etc."
[
	difficulty(integer) : "Difficulty Level" : 0 : "The difficulty level of the map. 1 = Beginner, 2 = Advanced, 3 = Expert"
	flooramount(integer) : "Floor Amount" : 0 : "How many floors (levels) are in the map?"
	leveltimer(integer) : "Level Timer" : 0 : "How long will players have to complete each floor?"
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

//
// superterryball.STBSpawnPoint
//
@PointClass base(BaseProperties_superterryball) editormodel( "models/player_marble.vmdl" ) 
metadata
{
	entity_tool_name = "Player Marble Spawnpoint"
	entity_tool_group = "Player"
	entity_tool_tip = "Defines a point where the player can (re)spawn"
}
= info_marble_start : "The position where a player's marble can spawn"
[
	spawnpointnum(integer) : "Spawn Point Number" : 1 : "The number spawn point that it is"
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
]

